---

  ## ordem de regras que serão executadas exclusivamente nas máquinas pertencentes ao grupo "database" no arquivo de hosts.
- hosts: database

  ## handlers é o local adequado para colocar reinicialização de serviços, aplicação de comandos e demais funções
  ## que podem ser executadas após uma task ser feita. sem a necessidade da criação de uma task exclusiva para isso, alem de poder ser reaproveitada em multiplas tasks.
  handlers:
    - name: "restart mysql"
      service:
        name: mysql
        state: restarted
      become: true

  ## área destinadas as tasks que serão executadas em forma sequêncial.
  tasks:
    ## Exemplo utilizando o modo mais novo e compacto para a instalação de multiplas dependencias.
    - name: 'Instalando os pacotes em forma de loop com loop:'
      apt:
        name: ['mysql-server-5.6', 'python-mysqldb', ]
        state: latest
      become: true

    # name: 'Criação e Configuração do Banco MySQL'
    - name: "Cria o banco do MySQL"
      mysql_db:
        name: '{{ wp_db_name }}'
        login_user: root
        state: present    # status possiveis no mySQL: present (criar banco) | absent (para exclusao) | dump (retirar informações de estruturas) | import (para importar informações ao banco) 

    # criando usuário no banco
    - name: "Criar usuário MySQL"
      mysql_user:
        login_user: root
        name: '{{ wp_username  }}'
        password: '{{ wp_user_password }}'
        priv: '{{ wp_db_name }}.*:ALL'
        state: present
        host: '{{ item }}'
      loop:
        - 'localhost'
        - '127.0.0.1'
        - '{{ wp_host_ip }}'

    # mais um exemplo de copy de arquivo para máquina remota
    - name: "Configurando mysql para conexões remotas"
      copy:
        src: 'files/my.cnf'
        dest: '/etc/mysql/my.cnf'
      become: true
      notify:
        - restart mysql

  ## ordem de regras que serão executadas exclusivamente nas máquinas pertencentes ao grupo "wordpress" no arquivo de hosts.
- hosts: wordpress

  ## Ver comentários a cima sobre handlers.
  handlers:
    - name: restart apache2
      service:
        name: apache2
        state: restarted
      become: true

  ## Campo obrigatório task para informar as tarefas a serem executadas.
  tasks:
      ###
      # Exemplo utilizando o modo mais novo e compacto para a instalação de multiplas dependencias. #
      ###
    - name: 'Instalando os pacotes em forma de loop com loop:'
      apt:
        name: ['php5', 'apache2', 'libapache2-mod-php5', 'php5-gd', 'libssh2-php', 'php5-mcrypt', 'php5-mysql']
        state: latest
      become: true
      #####

      # Como é feita a configuração de um banco no playbook do ansible.
      # baixando arquivos de repositórios e instalando (no caso o wordpress).
    - name: "Baixando wordpress"
      get_url:
        url: 'https://wordpress.org/latest.tar.gz'
        dest: '/tmp/wordpress.tar.gz'

      # extraindo wordpress com componente de extrassão do ansible unarchive
    - name: "extraindo wordpress"
      unarchive: 
        src: '/tmp/wordpress.tar.gz'
        dest: /var/www/html/
        remote_src: yes
      become: true

      # copiando arquivo via copy
    - copy:
        src: '{{ wp_installation_dir }}/wp-config-sample.php'
        dest: '{{ wp_installation_dir }}/wp-config.php'
        remote_src: yes
      become: true

      # alterando váriaveis necessárias do arquivo de configuração via expressão regular usando o replace.
    - name: "alterando nome do arquivo."
      replace:
        path: '{{ wp_installation_dir }}/wp-config.php'
        regexp: "{{ item.regex }}"
        replace: "{{ item.value }}"
        backup: yes
      loop:
        - { regex: 'database_name_here', value: "{{ wp_db_name }}" }
        - { regex: 'username_here', value: "{{ wp_username  }}" }
        - { regex: 'password_here', value: "{{ wp_user_password }}" }
        - { regex: 'localhost', value: "{{ wp_db_ip }}" }
      become: true

    # Exemplo de uma configuração usando um arquivo de template para movendo para o host desejado.
    # essa tag "template" necessita dos arquivos com extensão .j2 na pasta por padrão templates e usa as variáveis setadas nos arquivos de variáreis 
    - name: "Configurar Apache para servir Wordpress"
      template:
        src: 'templates/000-default.conf.j2'
        dest: '/etc/apache2/sites-available/000-default.conf'
      become: true
      notify: 
        - restart apache2


    